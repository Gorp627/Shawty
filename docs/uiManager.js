// docs/uiManager.js

const UIManager = {
     loadingScreen: null, homeScreen: null, gameUI: null, playerCountSpan: null, playerNameInput: null, playerPhraseInput: null, joinButton: null, homeScreenError: null, infoDiv: null, healthBarFill: null, healthText: null, killMessageDiv: null, canvas: null, killMessageTimeout: null,
     initialize: function() { this.loadingScreen=document.getElementById('loadingScreen'); this.homeScreen=document.getElementById('homeScreen'); this.gameUI=document.getElementById('gameUI'); this.playerCountSpan=document.getElementById('playerCount'); this.playerNameInput=document.getElementById('playerNameInput'); this.playerPhraseInput=document.getElementById('playerPhraseInput'); this.joinButton=document.getElementById('joinButton'); this.homeScreenError=document.getElementById('homeScreenError'); this.infoDiv=document.getElementById('info'); this.healthBarFill=document.getElementById('healthBarFill'); this.healthText=document.getElementById('healthText'); this.killMessageDiv=document.getElementById('killMessage'); this.canvas=document.getElementById('gameCanvas'); if(!this.loadingScreen||!this.homeScreen||!this.gameUI||!this.canvas||!this.joinButton){console.error("UI Element missing!");document.body.innerHTML="<p style='color:red;'>UI Init Error!</p>";return false;} console.log("[UIManager] Initialized."); return true; },
     bindStateListeners: function(stateMachine) { if (!stateMachine?.on) return; stateMachine.on('loading', (opts={})=>this.showLoading(opts.message,opts.error,opts.assets)); stateMachine.on('homescreen',(opts={})=>this.showHomescreen(opts.playerCount)); stateMachine.on('joining',(opts={})=>this.showJoining(opts.waitingForAssets)); stateMachine.on('playing',()=>this.showGame()); console.log("[UIManager] State listeners bound."); },
     showLoading: function(msg="Loading...", err=false, assets=false){if(!this.loadingScreen)return; if(this.homeScreen)this.homeScreen.style.display='none';this.homeScreen.classList.remove('visible'); if(this.gameUI)this.gameUI.style.display='none';this.gameUI.classList.remove('visible'); if(this.canvas)this.canvas.style.display='none';this.canvas.classList.remove('visible'); this.loadingScreen.style.display='flex';const p=this.loadingScreen.querySelector('p');if(p)p.innerHTML=msg;this.loadingScreen.classList.toggle('assets',!!assets);this.loadingScreen.classList.toggle('error',!!err);if(p&&err)p.style.color='red';else if(p)p.style.color=''; },
     showHomescreen: function(pCount='?'){if(!this.homeScreen)return;if(this.loadingScreen)this.loadingScreen.style.display='none'; if(this.gameUI)this.gameUI.style.display='none';this.gameUI.classList.remove('visible');if(this.canvas)this.canvas.style.display='none';this.canvas.classList.remove('visible');if(this.joinButton){this.joinButton.disabled=false;this.joinButton.textContent="Join Game";}if(this.playerCountSpan)this.playerCountSpan.textContent=pCount??this.playerCountSpan.textContent??'?';this.homeScreen.style.display='flex';requestAnimationFrame(()=>{this.homeScreen?.classList.add('visible');});},
     showJoining: function(waitAssets=false){if(!this.joinButton||!this.loadingScreen)return;if(waitAssets){this.showLoading("Loading Assets...");this.loadingScreen?.classList.add('assets');}else{if(this.homeScreen)this.homeScreen.style.display='flex';this.joinButton.disabled=true;this.joinButton.textContent="Joining...";}},
     showGame: function(){if(!this.gameUI||!this.canvas)return;if(this.loadingScreen)this.loadingScreen.style.display='none';if(this.homeScreen)this.homeScreen.style.display='none';this.homeScreen.classList.remove('visible');this.gameUI.style.display='block';this.canvas.style.display='block';requestAnimationFrame(()=>{this.gameUI?.classList.add('visible');this.canvas?.classList.add('visible');});if(this.infoDiv)this.infoDiv.textContent=`Playing as ${localPlayerName||'Player'}`;},
     updatePlayerCount: function(c){if(this.playerCountSpan)this.playerCountSpan.textContent=c;},
     updateHealthBar: function(h){const hp=Math.max(0,Math.min(100,h));if(this.healthBarFill&&this.healthText){const fW=`${hp}%`;const bP=`${100-hp}% 0%`;this.healthBarFill.style.width=fW;this.healthBarFill.style.backgroundPosition=bP;this.healthText.textContent=`${Math.round(hp)}%`;}},
     updateInfo: function(t){if(this.infoDiv)this.infoDiv.textContent=t;},
     showError: function(t,s='homescreen'){if(s==='homescreen'&&this.homeScreenError)this.homeScreenError.textContent=t;else if(s==='loading'&&this.loadingScreen){const p=this.loadingScreen.querySelector('p');if(p){p.innerHTML=t;p.style.color='red';}}else console.error(`UI Err: ${t}`);},
     clearError: function(){if(this.homeScreenError)this.homeScreenError.textContent='';},
     showKillMessage: function(m){if(this.killMessageTimeout)clearTimeout(this.killMessageTimeout);if(this.killMessageDiv){this.killMessageDiv.textContent=m;this.killMessageDiv.classList.add('visible');this.killMessageTimeout=setTimeout(()=>{if(this.killMessageDiv)this.killMessageDiv.classList.remove('visible');},CONFIG.KILL_MESSAGE_DURATION);}},
     clearKillMessage: function(){if(this.killMessageTimeout)clearTimeout(this.killMessageTimeout);if(this.killMessageDiv)this.killMessageDiv.classList.remove('visible');}
};
window.UIManager = UIManager; // Export globally
console.log("uiManager.js loaded");
