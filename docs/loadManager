// docs/loadManager.js (Add Gun Model and Sound - REGENERATED v3)

const loadManager = {
    assets: {
        map: { state: 'pending', path: CONFIG?.MAP_PATH, data: null, type: 'gltf' },
        playerModel: { state: 'pending', path: CONFIG?.PLAYER_MODEL_PATH, data: null, type: 'gltf' },
        gunModel: { state: 'pending', path: CONFIG?.GUN_MODEL_PATH, data: null, type: 'gltf'}, // Added Gun Model
        gunSound: { state: 'pending', path: CONFIG?.GUN_SHOT_SOUND_PATH, data: null, type: 'audio'}, // Added Gun Sound
        // Add other assets here (e.g., textures)
    },
    loaders: {
        gltf: null,
        texture: null,
        audio: null, // Added audio loader reference
    },
    requiredForGame: ['map', 'playerModel', 'gunModel', 'gunSound'], // Added gun assets as required
    eventListeners: {'ready': [], 'error': [], 'progress': [], 'assetLoaded': []},

    isAssetReady: function(key) {
        const asset = this.assets[key];
        if (!asset) return false;
        const isLoadedState = asset.state === 'loaded';
        const hasValidData = asset.data !== null && asset.data !== undefined && asset.data !== 'error';
        return isLoadedState && hasValidData;
    },

    getAssetData: function(key) {
        if (this.isAssetReady(key)) {
            return this.assets[key].data;
        }
        return null;
    },

    startLoading: function() {
        console.log("[LoadManager] Start Loading All Assets...");

        // --- Prerequisite Checks ---
        if (typeof THREE === 'undefined') {
             console.error("[LoadManager] CRITICAL: THREE object is undefined!");
             this.trigger('error',{message:'THREE library not loaded!'});
             stateMachine?.transitionTo('loading', {message: 'FATAL: Graphics Library Failed!', error: true});
             return;
        }
        // GLTF loader setup needs to happen before this runs (assumed in game.js or elsewhere)
        if (typeof window.loader === 'undefined' || !window.loader || !(window.loader instanceof THREE.GLTFLoader) ||
            typeof window.dracoLoader === 'undefined' || !window.dracoLoader || !(window.dracoLoader instanceof THREE.DRACOLoader)) {
             console.error("[LoadManager] CRITICAL: Global GLTFLoader or DRACOLoader reference is missing or invalid!");
             this.trigger('error',{message:'GFX Loader Ref Missing!'});
             stateMachine?.transitionTo('loading', {message: 'FATAL: Graphics Loader Ref Failed!', error: true});
             return;
        }
        this.loaders.gltf = window.loader;

        // Instantiate other loaders
        this.loaders.texture = new THREE.TextureLoader();
        this.loaders.audio = new THREE.AudioLoader(); // Instantiate AudioLoader

        console.log("[LoadManager] Verified Three.js and necessary Loaders available.");

        // --- Start Loading Each Pending Asset ---
        let assetsToLoadCount = 0;
        for (const key in this.assets) {
            if (this.assets.hasOwnProperty(key) && this.assets[key].state === 'pending') {
                assetsToLoadCount++;
                this.loadAsset(key);
            }
        }

        if (assetsToLoadCount === 0) {
            console.log("[LoadManager] No pending assets found to load.");
            this.checkCompletion();
        } else {
            console.log(`[LoadManager] Started loading process for ${assetsToLoadCount} asset(s).`);
        }
    },

    loadAsset: function(key) {
        const asset = this.assets[key];
        if (!asset || asset.state !== 'pending') return;

        const assetPath = asset.path;
        const assetType = asset.type?.toLowerCase();
        console.log(`[LoadManager] Requesting loadAsset('${key}'). Type: ${assetType || 'unknown'}, Path: ${assetPath}`);

        if (typeof assetPath !== 'string' || !assetPath) {
             console.error(`[LoadManager] Invalid or undefined path for asset: ${key}. Path: ${assetPath}`);
             this._assetLoadedCallback(key, false, "Invalid path provided");
             return;
        }

        asset.state = 'loading';
        const manager = this;
        const startTime = Date.now();

        const onProg = (xhr) => {
             if (xhr.lengthComputable) manager.trigger('progress', {key: key, progress: Math.round(xhr.loaded / xhr.total * 100)});
        };
        const onSuccess = (loadedAsset) => {
             console.log(`[LoadManager] Network load OK for ${key} in ${Date.now() - startTime}ms.`);
             manager._assetLoadedCallback(key, true, loadedAsset);
        };
        const onError = (error) => {
             let errorMsg = `Failed to load asset '${key}'`;
             if (error instanceof Error) errorMsg += `: ${error.message}`;
             else if (error instanceof ProgressEvent && error.target?.status) errorMsg += ` (HTTP Error ${error.target.status})`;
             else if (typeof error === 'string') errorMsg += `: ${error}`;
             console.error(`[LoadManager] !!! FAILED to load ${key}. Path: ${assetPath}. Error:`, errorMsg, error);
             manager._assetLoadedCallback(key, false, errorMsg);
        };

        switch (assetType) {
            case 'gltf':
                if (!this.loaders.gltf) { onError("GLTF Loader not available"); return; }
                this.loaders.gltf.load(assetPath, onSuccess, onProg, onError);
                break;
            case 'texture':
                 if (!this.loaders.texture) { onError("Texture Loader not available"); return; }
                 this.loaders.texture.load(assetPath, onSuccess, undefined, onError);
                 break;
            case 'audio': // Added Audio case
                 if (!this.loaders.audio) { onError("Audio Loader not available"); return; }
                 this.loaders.audio.load(assetPath, onSuccess, onProg, onError); // AudioLoader supports progress
                 break;
            default:
                const unknownTypeError = `Unknown asset type: ${asset.type}`;
                console.error(`[LoadManager] ${unknownTypeError} for key '${key}'. Cannot load.`);
                onError(unknownTypeError);
        }
    },

    _assetLoadedCallback: function(assetKey, success, loadedAssetOrError) {
        const assetEntry = this.assets[assetKey];
        if (!assetEntry) { console.error(`[LM Callback] Asset entry for key '${assetKey}' not found!`); return; }

        assetEntry.state = success ? 'processing' : 'error';
        assetEntry.data = success ? loadedAssetOrError : (loadedAssetOrError || 'Unknown load error');
        console.log(`[LM Callback] Asset: ${assetKey}, Load Success: ${success}. State set to: '${assetEntry.state}'.`);

        try {
            if (success && assetEntry.data !== 'error') {
                const assetType = assetEntry.type?.toLowerCase();
                let processedData = assetEntry.data;

                if (assetType === 'gltf') {
                    const gltf = loadedAssetOrError;
                    if (!gltf?.scene || !(gltf.scene instanceof THREE.Object3D)) throw new Error("Invalid GLTF asset or no scene.");
                    processedData = gltf; // Keep the full GLTF object, not just scene, might need animations later
                    console.log(`[LM Process] Processed GLTF for ${assetKey}.`);

                    if (assetKey === 'map') {
                         window.mapMesh = processedData.scene; // Assign scene to global for collider creation
                         console.log("[LM Process] Assigned map scene to global 'mapMesh'.");
                         processedData.scene.traverse(child => {
                             if (child.isMesh) { child.receiveShadow = true; child.castShadow = true; }
                         });
                    } else if (assetKey === 'playerModel') {
                         processedData.scene.traverse(child => {
                             if (child.isMesh) { child.castShadow = true; child.receiveShadow = true; }
                         });
                         console.log("[LM Process] Applied shadow settings to playerModel.");
                         // Assign to global for access by entities/game? Or access via getAssetData?
                         // window.playerModelData = processedData; // Example global assignment
                    } else if (assetKey === 'gunModel') {
                         // Don't add gun model to scene here, attach to camera later
                          processedData.scene.traverse(child => {
                              if (child.isMesh) { child.castShadow = true; child.receiveShadow = false; } // Gun casts, might not receive much
                          });
                          console.log("[LM Process] Applied shadow settings to gunModel.");
                         // Assign to global or access via getAssetData
                         window.gunModelData = processedData; // Example
                    }

                } else if (assetType === 'texture') {
                    if (!(loadedAssetOrError instanceof THREE.Texture)) throw new Error("Not a THREE.Texture.");
                    console.log(`[LM Process] Validated texture for ${assetKey}.`);
                } else if (assetType === 'audio') { // Added Audio processing
                     if (!(loadedAssetOrError instanceof AudioBuffer)) throw new Error("Not an AudioBuffer.");
                     console.log(`[LM Process] Validated audio buffer for ${assetKey}.`);
                     if (assetKey === 'gunSound') {
                          window.gunSoundBuffer = loadedAssetOrError; // Assign to global
                     }
                }
                assetEntry.data = processedData;
                assetEntry.state = 'loaded';
            } else {
                assetEntry.state = 'error';
            }
        } catch (processingError) {
            console.error(`[LM Process] Error processing loaded asset ${assetKey}:`, processingError);
            assetEntry.state = 'error';
            assetEntry.data = processingError.message || 'Processing error';
        } finally {
             const finalData = assetEntry.data;
             let dataType = typeof finalData;
             if (finalData instanceof Error) dataType = `Error("${finalData.message}")`;
             else if (typeof finalData === 'object' && finalData !== null) dataType = `[${finalData.constructor?.name || 'Object'}]`;
             else if (typeof finalData === 'string' && assetEntry.state === 'error') dataType = `ErrorMsg("${finalData}")`;
             else dataType = String(finalData);
             console.log(`[LM Callback] Final state for ${assetKey}: ${assetEntry.state}, Data type: ${dataType}`);
        }

        this.trigger('assetLoaded', { key: assetKey, success: assetEntry.state === 'loaded' });
        this.checkCompletion();
    },

    checkCompletion: function() {
        let allRequiredDone = true;
        let anyRequiredError = false;
        let stillInProgress = false;

        for (const key of this.requiredForGame) {
            const assetInfo = this.assets[key];
            if (!assetInfo) {
                console.error(`[LM Check] Required asset key '${key}' is missing from assets definition!`);
                anyRequiredError = true; allRequiredDone = false; continue;
            }
            const assetState = assetInfo.state;
            if (assetState === 'pending' || assetState === 'loading' || assetState === 'processing') {
                allRequiredDone = false; stillInProgress = true; break;
            }
            if (assetState === 'error') {
                anyRequiredError = true;
                console.warn(`[LM Check] Required asset '${key}' failed.`);
            } else if (assetState !== 'loaded') {
                 console.error(`[LM Check] Required asset '${key}' has unexpected final state: ${assetState}`);
                 anyRequiredError = true;
            }
        }

        if (stillInProgress) return;

        if (allRequiredDone) {
             console.log(`[LM Check] All required assets finished. Any Errors: ${anyRequiredError}`);
             if (anyRequiredError) {
                 console.error("[LM Check] Triggering global 'error' due to failed required asset(s).");
                 this.trigger('error', { message: 'One or more required assets failed to load.' });
             } else {
                 console.log("[LM Check] All required assets loaded successfully. Triggering 'ready'.");
                 assetsAreReady = true; // Set global flag
                 this.trigger('ready');
             }
        } else {
             console.error("[LM Check] Cannot trigger 'ready' because required asset definitions were missing or failed critically.");
             this.trigger('error', { message: 'Missing required asset definitions or critical failure.' });
        }
    },

    on: function(eventName, callback) {
        if (typeof callback !== 'function') { console.error(`[LM] Invalid callback for event '${eventName}'`); return; }
        if (!this.eventListeners[eventName]) this.eventListeners[eventName] = [];
        this.eventListeners[eventName].push(callback);
    },
    trigger: function(eventName, data = {}) {
        if (this.eventListeners[eventName]) {
            this.eventListeners[eventName].slice().forEach(callback => {
                try { callback(data); } catch (e) { console.error(`[LM Trigger] Error in listener for '${eventName}':`, e); }
            });
        }
    }
};
window.loadManager = loadManager;
console.log("loadManager.js loaded (Added Gun/Sound - REGENERATED v3)");
